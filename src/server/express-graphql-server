/*!
 * express-graphql-server
 * Copyright(c) 2023 Michael Orji
 * MIT Licensed
 */


"use strict";

const EventEmitter = require("events").EventEmitter;

class ExpressGraphQLServer extends EventEmitter { 
  /**
   * Create and return a new ExpressGraphQLServer instance 
   * 
   * @param {Object} [expressApp] An express app instance (`const app = express()`)
   * @param {http[s].Server} [httpServer] http(s).Server instance 
   * @param {ApolloServer} [graphQLServer] Apollo GraphQL Server instance
   * @param {Object} [corsOptions] CORS middleware options 
   * @return {Object}
   */
  constructor(expressApp, httpServer, graphQLServer, corsOptions) {
    super();
    this.#init(expressApp, httpServer, graphQLServer, corsOptions);
  }

  /**
   * Start the server http listening on passed hostname and port
   *   and the GraphQL server listening on the the GraphQL path (/graphql)
   * 
   * @return {Object}
   * @private
   */
   async start() { 
    const { app, graphQLServer, httpServer, host, port, corsOptions } = this;

    await graphQLServer.start(); 
    graphQLServer.applyMiddleware({ app, cors: corsOptions });
    await new Promise(resolve => httpServer.listen({ host, port }, resolve));

    this.emit("ready");

    return { 
      app, 
      httpServer,
      graphqlServer: graphQLServer
    };
  }

  /**
   * Execute arbitratry code 
   * 
   * @param {Function} [cb] The callback to invoke 
   * @return {Any}
   * @private
   */
  call(cb) { 
    const { app } = this;

    return cb({ app });
  }

  /**
   * Initialize the new instance 
   * 
   * @param app 
   * @param httpServer 
   * @param graphQLServer 
   * @param corsOptions 
   */
  #init(app, httpServer, graphQLServer, corsOptions) {
    this.app = app;
    this.graphQLServer = graphQLServer;
    this.httpServer = httpServer;
    this.host = app.get("host");
    this.port = app.get("port");

    if(typeof corsOptions !== "object" || corsOptions === null) {
      throw new TypeError("The cors settings is required and must ben an object");
    }

    this.corsOptions = corsOptions;
  }
}

module.exports = ExpressGraphQLServer;
